// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: seminar.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSeminar = `-- name: CreateSeminar :one
INSERT INTO seminar (id, created_at, updated_at, name, user_id,expiry_date)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, api_key, user_id, expiry_date
`

type CreateSeminarParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Name       string
	UserID     uuid.UUID
	ExpiryDate time.Time
}

func (q *Queries) CreateSeminar(ctx context.Context, arg CreateSeminarParams) (Seminar, error) {
	row := q.db.QueryRowContext(ctx, createSeminar,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.UserID,
		arg.ExpiryDate,
	)
	var i Seminar
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.UserID,
		&i.ExpiryDate,
	)
	return i, err
}

const deleteAfterTwoDays = `-- name: DeleteAfterTwoDays :exec
DELETE FROM seminar
WHERE expiry_date <= NOW()
`

func (q *Queries) DeleteAfterTwoDays(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAfterTwoDays)
	return err
}

const deleteSeminar = `-- name: DeleteSeminar :exec
DELETE FROM seminar WHERE id = $1
`

func (q *Queries) DeleteSeminar(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSeminar, id)
	return err
}

const editSeminarName = `-- name: EditSeminarName :one
UPDATE seminar
SET name = $2, updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, name, api_key, user_id, expiry_date
`

type EditSeminarNameParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) EditSeminarName(ctx context.Context, arg EditSeminarNameParams) (Seminar, error) {
	row := q.db.QueryRowContext(ctx, editSeminarName, arg.ID, arg.Name, arg.UpdatedAt)
	var i Seminar
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.UserID,
		&i.ExpiryDate,
	)
	return i, err
}

const getAllSeminars = `-- name: GetAllSeminars :many
SELECT id, created_at, updated_at, name, api_key, user_id, expiry_date FROM seminar WHERE user_id = $1
`

func (q *Queries) GetAllSeminars(ctx context.Context, userID uuid.UUID) ([]Seminar, error) {
	rows, err := q.db.QueryContext(ctx, getAllSeminars, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seminar
	for rows.Next() {
		var i Seminar
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ApiKey,
			&i.UserID,
			&i.ExpiryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSeminarsByAPIKey = `-- name: GetAllSeminarsByAPIKey :many
SELECT id, created_at, updated_at, name, api_key, user_id, expiry_date FROM seminar WHERE api_key = $1
`

func (q *Queries) GetAllSeminarsByAPIKey(ctx context.Context, apiKey string) ([]Seminar, error) {
	rows, err := q.db.QueryContext(ctx, getAllSeminarsByAPIKey, apiKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seminar
	for rows.Next() {
		var i Seminar
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ApiKey,
			&i.UserID,
			&i.ExpiryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeminarByName = `-- name: GetSeminarByName :many
SELECT id, created_at, updated_at, name, api_key, user_id, expiry_date FROM seminar WHERE name LIKE $1 and user_id = $2
`

type GetSeminarByNameParams struct {
	Name   string
	UserID uuid.UUID
}

func (q *Queries) GetSeminarByName(ctx context.Context, arg GetSeminarByNameParams) ([]Seminar, error) {
	rows, err := q.db.QueryContext(ctx, getSeminarByName, arg.Name, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seminar
	for rows.Next() {
		var i Seminar
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ApiKey,
			&i.UserID,
			&i.ExpiryDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
