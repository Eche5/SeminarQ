// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: question.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createQuestion = `-- name: CreateQuestion :one

INSERT INTO question (id, created_at, updated_at, user_id, seminar_id, question)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, user_id, seminar_id, question
`

type CreateQuestionParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	SeminarID uuid.UUID
	Question  string
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.SeminarID,
		arg.Question,
	)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.SeminarID,
		&i.Question,
	)
	return i, err
}

const getAllQuestion = `-- name: GetAllQuestion :many
SELECT id, created_at, updated_at, user_id, seminar_id, question FROM question WHERE seminar_id = $1 AND user_id = $2
`

type GetAllQuestionParams struct {
	SeminarID uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) GetAllQuestion(ctx context.Context, arg GetAllQuestionParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestion, arg.SeminarID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.SeminarID,
			&i.Question,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
